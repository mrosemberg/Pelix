{"ast":null,"code":"var _jsxFileName = \"C:\\\\Proyectos\\\\Web\\\\PelixSource\\\\Pelix\\\\src\\\\pages\\\\index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport fetch from 'isomorphic-unfetch'; // import Header from \"../components/Header\";\n// import Movies from '../components/Movies';\n\nconst Index = props => __jsx(\"div\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 4\n  }\n}, __jsx(\"h1\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 7\n  }\n}, \"Pelix\"), __jsx(\"ul\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 7\n  }\n}, __jsx(\"li\", {\n  key: props.id,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 9\n  }\n}, __jsx(Link, {\n  href: \"/m/[id].js\",\n  as: `/m/${props.id}`,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 13\n  }\n}, __jsx(\"a\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 17\n  }\n}, props.showImage.map(image => __jsx(\"img\", {\n  src: image.medium,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 21\n  }\n})))))));\n\nIndex.getInitialProps = async function () {\n  const res = await fetch('http://api.tvmaze.com/shows');\n  const data = await res.json();\n  console.log(`Fetched. Total: ${data.length}`);\n  return [{\n    idShow: data.map(entry => entry.id),\n    showImage: data.map(entry => entry.image),\n    nameShow: data.map(entry => entry.name)\n  }];\n};\n\nexport default Index;","map":{"version":3,"sources":["C:/Proyectos/Web/PelixSource/Pelix/src/pages/index.js"],"names":["Link","fetch","Index","props","id","showImage","map","image","medium","getInitialProps","res","data","json","console","log","length","idShow","entry","nameShow","name"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CACA;AACA;;AAEA,MAAMC,KAAK,GAAGC,KAAK,IAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADH,EAGG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACE;AAAI,EAAA,GAAG,EAAEA,KAAK,CAACC,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI,MAAC,IAAD;AAAM,EAAA,IAAI,EAAC,YAAX;AAAwB,EAAA,EAAE,EAAG,MAAKD,KAAK,CAACC,EAAG,EAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAID,KAAK,CAACE,SAAN,CAAgBC,GAAhB,CAAoBC,KAAK,IACzB;AAAK,EAAA,GAAG,EAAEA,KAAK,CAACC,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EADA,CAAJ,CADJ,CADJ,CADF,CAHH,CADH;;AAgBAN,KAAK,CAACO,eAAN,GAAwB,kBAAkB;AACxC,QAAMC,GAAG,GAAK,MAAMT,KAAK,CAAC,6BAAD,CAAzB;AACA,QAAMU,IAAI,GAAI,MAAMD,GAAG,CAACE,IAAJ,EAApB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBH,IAAI,CAACI,MAAO,EAA3C;AAEA,SAAO,CAAC;AACJC,IAAAA,MAAM,EAAEL,IAAI,CAACL,GAAL,CAASW,KAAK,IAAIA,KAAK,CAACb,EAAxB,CADJ;AAEJC,IAAAA,SAAS,EAAEM,IAAI,CAACL,GAAL,CAASW,KAAK,IAAIA,KAAK,CAACV,KAAxB,CAFP;AAGJW,IAAAA,QAAQ,EAAEP,IAAI,CAACL,GAAL,CAASW,KAAK,IAAIA,KAAK,CAACE,IAAxB;AAHN,GAAD,CAAP;AAKD,CAXD;;AAaA,eAAejB,KAAf","sourcesContent":["import Link from \"next/link\";\r\nimport fetch from 'isomorphic-unfetch';\r\n// import Header from \"../components/Header\";\r\n// import Movies from '../components/Movies';\r\n\r\nconst Index = props => (\r\n   <div>\r\n      <h1>Pelix</h1>\r\n\r\n      <ul>\r\n        <li key={props.id}>\r\n            <Link href=\"/m/[id].js\" as={`/m/${props.id}`}>\r\n                <a>{props.showImage.map(image => (\r\n                    <img src={image.medium}/>\r\n                ))}</a>\r\n            </Link>\r\n        </li>\r\n      </ul>\r\n   </div>\r\n);\r\n\r\nIndex.getInitialProps = async function () {\r\n  const res   = await fetch('http://api.tvmaze.com/shows');\r\n  const data  = await res.json();\r\n\r\n  console.log(`Fetched. Total: ${data.length}`);\r\n\r\n  return [{\r\n      idShow: data.map(entry => entry.id),\r\n      showImage: data.map(entry => entry.image),\r\n      nameShow: data.map(entry => entry.name)\r\n  }];\r\n};\r\n\r\nexport default Index;"]},"metadata":{},"sourceType":"module"}